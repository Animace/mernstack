{"ast":null,"code":"var _jsxFileName = \"/Users/akj/Desktop/clone/client/src/pages/IndexPage.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport Post from \"../Post\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function IndexPage() {\n  _s();\n  const [posts, setPosts] = useState([]);\n  useEffect(() => {\n    fetchPosts();\n  }, []);\n  async function fetchPosts() {\n    try {\n      const response = await fetch('http://localhost:4000/post');\n      if (!response.ok) {\n        throw new Error('Failed to fetch posts');\n      }\n      const postsData = await response.json();\n      setPosts(postsData);\n    } catch (error) {\n      console.error('Error fetching posts:', error);\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: posts.length > 0 && posts.map(post => /*#__PURE__*/_jsxDEV(Post, {\n      ...post\n    }, post._id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 17\n    }, this))\n  }, void 0, false);\n}\n_s(IndexPage, \"bG8V4duoIfO0BEPgauWMVT5Qvyw=\");\n_c = IndexPage;\nvar _c;\n$RefreshReg$(_c, \"IndexPage\");","map":{"version":3,"names":["React","useEffect","useState","Post","jsxDEV","_jsxDEV","Fragment","_Fragment","IndexPage","_s","posts","setPosts","fetchPosts","response","fetch","ok","Error","postsData","json","error","console","children","length","map","post","_id","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/akj/Desktop/clone/client/src/pages/IndexPage.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport Post from \"../Post\";\n\nexport default function IndexPage() {\n    const [posts, setPosts] = useState([]);\n\n    useEffect(() => {\n        fetchPosts();\n    }, []);\n\n    async function fetchPosts() {\n        try {\n            const response = await fetch('http://localhost:4000/post');\n            if (!response.ok) {\n                throw new Error('Failed to fetch posts');\n            }\n            const postsData = await response.json();\n            setPosts(postsData);\n        } catch (error) {\n            console.error('Error fetching posts:', error);\n        }\n    }\n\n    return (\n        <>\n            {posts.length > 0 && posts.map(post => (\n                <Post key={post._id} {...post} />\n            ))}\n        </>\n    );\n}\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,IAAI,MAAM,SAAS;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAE3B,eAAe,SAASC,SAASA,CAAA,EAAG;EAAAC,EAAA;EAChC,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAEtCD,SAAS,CAAC,MAAM;IACZW,UAAU,CAAC,CAAC;EAChB,CAAC,EAAE,EAAE,CAAC;EAEN,eAAeA,UAAUA,CAAA,EAAG;IACxB,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,4BAA4B,CAAC;MAC1D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;QACd,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;MAC5C;MACA,MAAMC,SAAS,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;MACvCP,QAAQ,CAACM,SAAS,CAAC;IACvB,CAAC,CAAC,OAAOE,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IACjD;EACJ;EAEA,oBACId,OAAA,CAAAE,SAAA;IAAAc,QAAA,EACKX,KAAK,CAACY,MAAM,GAAG,CAAC,IAAIZ,KAAK,CAACa,GAAG,CAACC,IAAI,iBAC/BnB,OAAA,CAACF,IAAI;MAAA,GAAoBqB;IAAI,GAAlBA,IAAI,CAACC,GAAG;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAa,CACnC;EAAC,gBACJ,CAAC;AAEX;AAACpB,EAAA,CA3BuBD,SAAS;AAAAsB,EAAA,GAATtB,SAAS;AAAA,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}